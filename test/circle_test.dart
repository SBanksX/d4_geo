import 'package:d4_geo/d4_geo.dart';
import 'package:d4_geo/src/range.dart';
import 'package:test/test.dart';

void main() {
  var a = [
    [-1.373400766945016, -1.5707963267948966],
    [-1.5707963267948961, -1.4660765716752364],
    [-1.5707963267948963, -1.3613568165555772],
    [-1.5707963267948963, -1.256637061435918],
    [-1.5707963267948966, -1.1519173063162582],
    [-1.5707963267948966, -1.047197551196599],
    [-1.5707963267948966, -0.9424777960769395],
    [-1.5707963267948966, -0.83775804095728],
    [-1.5707963267948966, -0.7330382858376205],
    [-1.5707963267948966, -0.628318530717961],
    [-1.5707963267948966, -0.5235987755983016],
    [-1.5707963267948966, -0.41887902047864206],
    [-1.5707963267948966, -0.31415926535898264],
    [-1.5707963267948966, -0.20943951023932317],
    [-1.5707963267948966, -0.10471975511966367],
    [-1.5707963267948966, -4.195962738671156e-15],
    [-1.5707963267948966, 0.10471975511965528],
    [-1.5707963267948966, 0.20943951023931476],
    [-1.5707963267948966, 0.3141592653589742],
    [-1.5707963267948966, 0.4188790204786337],
    [-1.5707963267948966, 0.5235987755982932],
    [-1.5707963267948966, 0.6283185307179526],
    [-1.5707963267948966, 0.7330382858376122],
    [-1.5707963267948966, 0.8377580409572716],
    [-1.5707963267948966, 0.942477796076931],
    [-1.5707963267948966, 1.0471975511965905],
    [-1.5707963267948966, 1.15191730631625],
    [-1.5707963267948963, 1.2566370614359097],
    [-1.5707963267948963, 1.3613568165555687],
    [-1.5707963267948961, 1.466076571675229],
    [-1.5637566952963744, 1.5707963267948966],
    [1.5707963267948961, 1.466076571675246],
    [1.5707963267948963, 1.3613568165555865],
    [1.5707963267948963, 1.2566370614359268],
    [1.5707963267948966, 1.1519173063162675],
    [1.5707963267948966, 1.0471975511966078],
    [1.5707963267948966, 0.9424777960769484],
    [1.5707963267948966, 0.8377580409572885],
    [1.5707963267948966, 0.7330382858376286],
    [1.5707963267948966, 0.6283185307179686],
    [1.5707963267948966, 0.5235987755983087],
    [1.5707963267948966, 0.4188790204786489],
    [1.5707963267948966, 0.31415926535898897],
    [1.5707963267948966, 0.20943951023932902],
    [1.5707963267948966, 0.10471975511966912],
    [1.5707963267948966, 9.20340872693658e-15],
    [1.5707963267948966, -0.10471975511965072],
    [1.5707963267948966, -0.20943951023931065],
    [1.5707963267948966, -0.31415926535897054],
    [1.5707963267948966, -0.41887902047863046],
    [1.5707963267948966, -0.5235987755982904],
    [1.5707963267948966, -0.6283185307179503],
    [1.5707963267948966, -0.7330382858376102],
    [1.5707963267948966, -0.83775804095727],
    [1.5707963267948966, -0.94247779607693],
    [1.5707963267948966, -1.0471975511965899],
    [1.5707963267948966, -1.1519173063162496],
    [1.5707963267948963, -1.2566370614359093],
    [1.5707963267948963, -1.3613568165555692],
    [1.5707963267948961, -1.466076571675229],
    [1.5632873679967587, -1.5707963267948966]
  ];

  var b = [
    [-1.373400766945016, -1.5707963267948966],
    [-1.5707963267948961, -1.4660765716752364],
    [-1.5707963267948963, -1.3613568165555772],
    [-1.5707963267948963, -1.256637061435918],
    [-1.5707963267948966, -1.1519173063162582],
    [-1.5707963267948966, -1.047197551196599],
    [-1.5707963267948966, -0.9424777960769395],
    [-1.5707963267948966, -0.83775804095728],
    [-1.5707963267948966, -0.7330382858376205],
    [-1.5707963267948966, -0.628318530717961],
    [-1.5707963267948966, -0.5235987755983016],
    [-1.5707963267948966, -0.41887902047864206],
    [-1.5707963267948966, -0.31415926535898264],
    [-1.5707963267948966, -0.20943951023932317],
    [-1.5707963267948966, -0.10471975511966367],
    [-1.5707963267948966, -4.195962738671156e-15],
    [-1.5707963267948966, 0.10471975511965528],
    [-1.5707963267948966, 0.20943951023931476],
    [-1.5707963267948966, 0.3141592653589742],
    [-1.5707963267948966, 0.4188790204786337],
    [-1.5707963267948966, 0.5235987755982932],
    [-1.5707963267948966, 0.6283185307179526],
    [-1.5707963267948966, 0.7330382858376122],
    [-1.5707963267948966, 0.8377580409572716],
    [-1.5707963267948966, 0.942477796076931],
    [-1.5707963267948966, 1.0471975511965905],
    [-1.5707963267948966, 1.15191730631625],
    [-1.5707963267948963, 1.2566370614359097],
    [-1.5707963267948963, 1.3613568165555687],
    [-1.5707963267948961, 1.466076571675229],
    [-1.5637566952963744, 1.5707963267948966],
    [1.5707963267948961, 1.466076571675246],
    [1.5707963267948963, 1.3613568165555865],
    [1.5707963267948963, 1.2566370614359268],
    [1.5707963267948966, 1.1519173063162675],
    [1.5707963267948966, 1.0471975511966078],
    [1.5707963267948966, 0.9424777960769484],
    [1.5707963267948966, 0.8377580409572885],
    [1.5707963267948966, 0.7330382858376286],
    [1.5707963267948966, 0.6283185307179686],
    [1.5707963267948966, 0.5235987755983087],
    [1.5707963267948966, 0.4188790204786489],
    [1.5707963267948966, 0.31415926535898897],
    [1.5707963267948966, 0.20943951023932902],
    [1.5707963267948966, 0.10471975511966912],
    [1.5707963267948966, 9.20340872693658e-15],
    [1.5707963267948966, -0.10471975511965072],
    [1.5707963267948966, -0.20943951023931065],
    [1.5707963267948966, -0.31415926535897054],
    [1.5707963267948966, -0.41887902047863046],
    [1.5707963267948966, -0.5235987755982904],
    [1.5707963267948966, -0.6283185307179503],
    [1.5707963267948966, -0.7330382858376102],
    [1.5707963267948966, -0.83775804095727],
    [1.5707963267948966, -0.94247779607693],
    [1.5707963267948966, -1.0471975511965899],
    [1.5707963267948966, -1.1519173063162496],
    [1.5707963267948963, -1.2566370614359093],
    [1.5707963267948963, -1.3613568165555692],
    [1.5707963267948961, -1.466076571675229],
    [1.5632873679967587, -1.5707963267948966]
  ];

  test("test", () {
    expect(a, equals(b));
  });

  test("circle generates a Polygon", () {
    final o = GeoCircle()();
    expect(o["type"], equals("Polygon"));
    expect(
        o["coordinates"],
        equals([
          [
            [-78.69007, -90],
            [-90, -84],
            [-90, -78],
            [-90, -72],
            [-90, -66],
            [-90, -60],
            [-90, -54],
            [-90, -48],
            [-90, -42],
            [-90, -36],
            [-90, -30],
            [-90, -24],
            [-90, -18],
            [-90, -12],
            [-90, -6],
            [-90, 0],
            [-90, 6],
            [-90, 12],
            [-90, 18],
            [-90, 24],
            [-90, 30],
            [-90, 36],
            [-90, 42],
            [-90, 48],
            [-90, 54],
            [-90, 60],
            [-90, 66],
            [-90, 72],
            [-90, 78],
            [-90, 84],
            [-89.59666, 90],
            [90, 84],
            [90, 78],
            [90, 72],
            [90, 66],
            [90, 60],
            [90, 54],
            [90, 48],
            [90, 42],
            [90, 36],
            [90, 30],
            [90, 24],
            [90, 18],
            [90, 12],
            [90, 6],
            [90, 0],
            [90, -6],
            [90, -12],
            [90, -18],
            [90, -24],
            [90, -30],
            [90, -36],
            [90, -42],
            [90, -48],
            [90, -54],
            [90, -60],
            [90, -66],
            [90, -72],
            [90, -78],
            [90, -84],
            [89.56977, -90]
          ].map((a) => a.map((b) => closeTo(b, 1e-5)))
        ]));
  });

  test("circle.center([0, 90])", () {
    final o = (GeoCircle()..center = [0, 90])();
    expect(o["type"], equals("Polygon"));
    expect(
        o["coordinates"],
        equals([
          range(start: 360, stop: -1, step: -6)
              .map((x) => [if (x >= 180) x - 360 else x, 0])
              .map((a) => a.map((b) => closeTo(b, 1e-6)))
        ]));
  });

  test("circle.center([45, 45])", () {
    final o = (GeoCircle()
      ..center = [45, 45]
      ..radius = 0)();
    expect(o["type"], equals("Polygon"));
    expect(
        o["coordinates"][0][0], equals([45, 45].map((a) => closeTo(a, 1e-6))));
  });

  test("circle: first and last points are coincident", () {
    final o = (GeoCircle()
      ..center = [0, 0]
      ..radius = 0.02
      ..precision = 45)();
    expect(o["coordinates"][0][0],
        equals(o["coordinates"][0].removeLast().map((a) => closeTo(a, 1e-6))));
  });
}
